import React, { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@apollo/client';
import { GET_PRODUCTS, ADD_PRODUCT, REMOVE_PRODUCT, PRODUCT_ADDED_SUBSCRIPTION } from '../graphql/operations';
import { getAccessToken, signOut } from '../services/authService';
import Markdown from 'markdown-to-jsx';

interface Product {
  id: string;
  name: string;
}

interface GetProductsQuery {
  products: Product[];
}

const HomePage: React.FC = () => {
  const [newProductText, setNewProductText] = useState('');
  const { data, loading, error, subscribeToMore } = useQuery(GET_PRODUCTS);
  const [addProduct] = useMutation(ADD_PRODUCT);
  const [removeProduct] = useMutation(REMOVE_PRODUCT);
  const [generatedIdea, setGeneratedIdea] = useState<string>("");

  const generateIdea = () => {
    setTimeout(() => {
      setGeneratedIdea("This is a simulated brilliant idea generated by GPT-4.");
    }, 1000);
  };

  useEffect(() => {
    subscribeToMore({
      document: PRODUCT_ADDED_SUBSCRIPTION,
      updateQuery: (prev, { subscriptionData }) => {
        if (!subscriptionData.data) return prev;
        const newProduct = subscriptionData.data.productAdded;

        if (prev.products.some((product: Product) => product.id === newProduct.id)) {
          return prev;
        }
        return Object.assign({}, prev, {
          products: [...prev.products, newProduct]
        });
      },
    });
  }, [subscribeToMore]);

  if (loading) return (
    <div className="flex justify-center items-center min-h-screen bg-black">
      <button className="btn text-2xl font-bold text-white">
        Loading...
      </button>
    </div>
  );
  if (error) return <p className="text-white">{'Error: ' + error}</p>;

  const handleAddProduct = async () => {
    if (!newProductText.trim()) return;
    await addProduct({ variables: { name: newProductText } });
    setNewProductText('');
    
  };

  const handleRemoveProduct = async (id: string) => {
    await removeProduct({
      variables: { id },
      update(cache) {
        const existingProducts = cache.readQuery<GetProductsQuery>({ query: GET_PRODUCTS });
        if (existingProducts?.products) {
          cache.writeQuery({
            query: GET_PRODUCTS,
            data: {
              products: existingProducts.products.filter(product => product.id !== id),
            },
          });
        }
      },
    });
  };

  return (
    <div className="min-h-screen flex flex-col bg-black">
      <nav className="bg-transparent text-white p-4 flex justify-between items-center">
        <a href="/" className="text-3xl font-bold">Idea Master</a>
        <button className="btn" onClick={signOut}>Sign out</button>
      </nav>

      <div className="flex flex-grow justify-center items-center bg-black">
        <div className="card card-compact w-full max-w-lg bg-transparent shadow-xl">
          <div className="card-body items-stretch text-center">
            <h1 className="card-title self-center text-4xl font-bold mb-4 text-white">Idea Master</h1>
            <div className="form-control w-full mb-4">
              <div className="join flex items-center rounded-md">
                <input
                  type="text"
                  placeholder="Add your thoughts..."
                  className="join-item flex-grow input input-bordered input-md input-primary text-white bg-transparent border-white border rounded-md mr-2"
                  value={newProductText}
                  onChange={(e) => setNewProductText(e.target.value)}
                />
                <button className="join-item btn btn-square btn-md btn-primary border rounded-md" onClick={handleAddProduct}>
                  Add
                </button>
              </div>
            </div>
            <h2 className="text-white text-left text-xl mt-4 mb-2">Thoughts List</h2>
            <div className="space-y-2 w-full">
            {data.products.length > 0 ? (
              <div className="space-y-2 w-full">
                {data.products.map(({ name, id }: Product) => (
                  <div key={id} className="card card-compact w-full bg-transparent border border-white flex-row items-center justify-between">
                    <div className="card-body">
                      <div className="flex justify-between items-center w-full">
                        <span className="text-white">{name}</span>
                        <button className="btn btn-xs btn-circle btn-error" onClick={() => handleRemoveProduct(id)}>
                          x
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-white text-left">No thoughts added</div>
            )}
          </div>
            <button className="btn btn-primary mt-4" onClick={generateIdea}>
            Generate a Brilliant Idea
          </button>
          <div className="text-white mt-2" style={{ maxWidth: '100%', overflowX: 'auto' }}>
            <Markdown>{generatedIdea}</Markdown> {/* Render generatedIdea as Markdown */}
          </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HomePage;
